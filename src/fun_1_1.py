import numpy as np
    
def fun_1_1(PL = None,gamma = None,f = None,seta_C2U_C = None,seta_o = None,A = None,B = None,eta_o = None): 
    #FUN_1_1
#    EQN_1 = FUN_1_1(DIST_C2U,PL,GAMMA,F,SETA_C2U_C,SETA_O,A,B,ETA_O)
    
    #    This function was generated by the Symbolic Math Toolbox version 8.1.
#    09-Jan-2021 01:17:49
    
    t2 = seta_o - seta_C2U_C
    t3 = np.log(10.0)
    t4 = 1.0 / t3
    eqn_1 = lambda dist_C2U = None: - PL + eta_o + np.multiply(np.multiply(t4,np.log(f)),20.0) + np.multiply(np.multiply(np.multiply(gamma,t4),np.log(dist_C2U)),10.0) - np.multiply(np.multiply(A,t2),np.exp(t2 / B)) - 295.0 / 2.0
    return eqn_1