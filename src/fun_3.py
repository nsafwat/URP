import numpy as np
    
def fun_3(PL = None,f = None,h_dlta_TUAV_UAV = None,Go = None,seta_3db = None,h_B = None,h_UAV = None,L_r = None,a_A2A = None,b_A2A = None): 
    #FUN_3
#    EQN_3 = FUN_3(SETA_TUAV2UAV,PL,F,H_DLTA_TUAV_UAV,GO,SETA_3DB,H_B,H_UAV,L_R,A_A2A,B_A2A)
    
    #    This function was generated by the Symbolic Math Toolbox version 8.1.
#    06-Jan-2021 16:46:52
    
    t2 = np.log(10.0)
    t3 = 1.0 / t2
    # t4 = seta_TUAV2UAV.*pi.*(1.0./1.8e2);
# t5 = a_A2A-seta_TUAV2UAV;
# t6 = b_A2A.*(a_A2A-seta_TUAV2UAV);
# t7 = exp(b_A2A.*(a_A2A-seta_TUAV2UAV));
# t8 = a_A2A.*(exp(b_A2A.*(a_A2A-seta_TUAV2UAV)));
# t9 = (a_A2A.*(exp(b_A2A.*(a_A2A-seta_TUAV2UAV))))+1.0;
# t10 = 1.0./((a_A2A.*(exp(b_A2A.*(a_A2A-seta_TUAV2UAV))))+1.0);
    t11 = np.log(f)
    eqn_3 = lambda seta_TUAV2UAV = None: np.multiply(Go,- 2.0) - PL + 1.0 / seta_3db ** 2.0 * seta_TUAV2UAV ** 2.0 * 24.0 - np.multiply(np.multiply(t3,np.log(np.sin(np.multiply(np.multiply(seta_TUAV2UAV,np.pi),(1.0 / 180.0))))),20.0) + np.multiply(np.multiply(t3,np.log((1.0 / ((np.multiply(a_A2A,(np.exp(np.multiply(b_A2A,(a_A2A - seta_TUAV2UAV)))))) + 1.0)) - np.multiply(10.0 ** (np.multiply(np.multiply(t3,np.log(np.multiply(np.sqrt(2.0),1.0) / L_r ** 2 + 1.0)),(- 1.0 / 2.0)) + np.multiply(t3,np.log(np.cos(np.multiply(np.multiply(seta_TUAV2UAV,np.pi),(1.0 / 180.0))))) + np.multiply(np.multiply(t3,t11),(1.0 / 2.0)) + np.multiply(np.multiply(t3,np.log(h_B - h_UAV)),(1.0 / 2.0)) - 86.0 / 25.0),((1.0 / ((np.multiply(a_A2A,(np.exp(np.multiply(b_A2A,(a_A2A - seta_TUAV2UAV)))))) + 1.0)) - 1.0)))),20.0) + np.multiply(np.multiply(t3,t11),20.0) + np.multiply(np.multiply(t3,np.log(h_dlta_TUAV_UAV)),20.0) - 295.0 / 2.0
    return eqn_3