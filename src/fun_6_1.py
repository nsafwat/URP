import numpy as np
    
def fun_6_1(PL = None,f = None,seta_TUAV2UAV_C = None,Go = None,seta_3db = None,h_B = None,h_UAV = None,L_r = None,a = None,b = None): 
    #FUN_6_1
#    EQN_3 = FUN_6_1(H_DLTA,PL,F,SETA_TUAV2UAV_C,GO,SETA_3DB,H_B,H_UAV,L_R,A,B)
    
    #    This function was generated by the Symbolic Math Toolbox version 8.1.
#    06-Jan-2021 21:51:27
    
    t2 = np.log(10.0)
    t3 = 1.0 / t2
    t4 = np.multiply(np.multiply(seta_TUAV2UAV_C,np.pi),(1.0 / 180.0))
    t5 = a - seta_TUAV2UAV_C
    t6 = np.multiply(b,t5)
    t7 = np.exp(t6)
    t8 = np.multiply(a,t7)
    t9 = t8 + 1.0
    t10 = 1.0 / t9
    t11 = np.log(f)
    eqn_3 = lambda h_dlta = None: np.multiply(Go,- 2.0) - PL + 1.0 / seta_3db ** 2.0 * seta_TUAV2UAV_C ** 2.0 * 24.0 - np.multiply(np.multiply(t3,np.log(np.sin(t4))),20.0) + np.multiply(np.multiply(t3,np.log(t10 - np.multiply(10.0 ** (np.multiply(np.multiply(t3,np.log(np.multiply(np.sqrt(2.0),1.0) / L_r ** 2 + 1.0)),(- 1.0 / 2.0)) + np.multiply(t3,np.log(np.cos(t4))) + np.multiply(np.multiply(t3,t11),(1.0 / 2.0)) + np.multiply(np.multiply(t3,np.log(h_B - h_UAV)),(1.0 / 2.0)) - 86.0 / 25.0),(t10 - 1.0)))),20.0) + np.multiply(np.multiply(t3,t11),20.0) + np.multiply(np.multiply(t3,np.log(h_dlta)),20.0) - 295.0 / 2.0
    return eqn_3