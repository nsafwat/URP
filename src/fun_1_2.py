import numpy as np
    
def fun_1_2(PL = None,gamma = None,h_UAV_C2U = None,h_BS = None,f = None,A = None,seta_o = None,B = None,eta_o = None): 
    #FUN_1_2
#    EQN = FUN_1_2(SETA,PL,GAMMA,H_UAV_C2U,H_BS,F,A,SETA_O,B,ETA_O)
    
    #    This function was generated by the Symbolic Math Toolbox version 8.1.
#    09-Jan-2021 01:36:12
    
    t2 = np.log(10.0)
    t3 = 1.0 / t2
    # t4 = seta-seta_o;
    eqn = lambda seta = None: - PL + eta_o - np.multiply(np.multiply(gamma,(np.multiply(t3,np.log(np.tan(np.multiply(seta,0.01744444444444444)))) - np.multiply(t3,np.log(- h_BS + h_UAV_C2U)))),10.0) + np.multiply(np.multiply(t3,np.log(f)),20.0) + np.multiply(np.multiply(A,(seta - seta_o)),np.exp(- (seta - seta_o) / B)) - 295.0 / 2.0
    return eqn