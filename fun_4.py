import numpy as np
    
def fun_4(f = None,seta_3db = None,h_B = None,h_UAV = None,L_r = None,a = None,b = None): 
    #FUN_4
#    X = FUN_4(SETA_TUAV2UAV,PL,F,GO,SETA_3DB,H_B,H_UAV,L_R,A,B)
    
    #    This function was generated by the Symbolic Math Toolbox version 8.1.
#    06-Jan-2021 16:57:22
    
    t2 = np.log(10.0)
    t3 = 1.0 / np.log(10.0)
    # t4 = a-seta_TUAV2UAV;
# t5 = b.*(a-seta_TUAV2UAV);
# t6 = exp(b.*(a-seta_TUAV2UAV));
# t7 = a.*(exp(b.*(a-seta_TUAV2UAV)));
# t8 = (a.*(exp(b.*(a-seta_TUAV2UAV))))+1.0;
# t9 = 1.0./((a.*(exp(b.*(a-seta_TUAV2UAV))))+1.0);
# t10 = seta_TUAV2UAV.*pi.*(1.0./1.8e2);
# t11 = cos(seta_TUAV2UAV.*pi.*(1.0./1.8e2));
# t12 = log(cos(seta_TUAV2UAV.*pi.*(1.0./1.8e2)));
# t13 = t3.*log(cos(seta_TUAV2UAV.*pi.*(1.0./1.8e2)));
# t14 = h_B-h_UAV;
# t15 = log(h_B-h_UAV);
# t16 = (1.0./log(1.0e1)).*log(h_B-h_UAV).*(1.0./2.0);
    t17 = np.sqrt(2.0)
    t18 = 1.0 / L_r ** 2
    t19 = np.multiply(t17,t18)
    t20 = t19 + 1.0
    t21 = np.log(t20)
    t22 = np.log(f)
    # t23 = (1.0./log(1.0e1)).*log(f).*(1.0./2.0);
# t27 = (1.0./log(1.0e1)).*log(((sqrt(2.0)).*(1.0./L_r.^2))+1.0).*(1.0./2.0);
# t24 = ((1.0./log(1.0e1)).*log(cos(seta_TUAV2UAV.*pi.*(1.0./1.8e2))))+((1.0./log(1.0e1)).*og(h_B-h_UAV).*(1.0./2.0))+((1.0./log(1.0e1)).*log(f).*(1.0./2.0))-((1.0./log(1.0e1)).*log(((sqrt(2.0)).*(1.0./L_r.^2))+1.0).*(1.0./2.0))-8.6e1./2.5e1;
# t25 = 1.0e1.^(((1.0./log(1.0e1)).*log(cos(seta_TUAV2UAV.*pi.*(1.0./1.8e2))))+((1.0./log(1.0e1)).*og(h_B-h_UAV).*(1.0./2.0))+((1.0./log(1.0e1)).*log(f).*(1.0./2.0))-((1.0./log(1.0e1)).*log(((sqrt(2.0)).*(1.0./L_r.^2))+1.0).*(1.0./2.0))-8.6e1./2.5e1);
# t26 = 1.0./((a.*(exp(b.*(a-seta_TUAV2UAV))))+1.0)-1.0;
# t28 = 1.0./((a.*(exp(b.*(a-seta_TUAV2UAV))))+1.0).^2;
# t29 = 1.0./(cos(seta_TUAV2UAV.*pi.*(1.0./1.8e2)));
# t30 = sin( seta_TUAV2UAV.*pi.*(1.0./1.8e2));
    x = lambda seta_TUAV2UAV = None: np.multiply(1.0 / seta_3db ** 2.0 * seta_TUAV2UAV,48.0) + (np.multiply(np.multiply(t3,(np.multiply(np.multiply(np.multiply(a,b),(np.exp(np.multiply(b,(a - seta_TUAV2UAV))))),(1.0 / ((np.multiply(a,(np.exp(np.multiply(b,(a - seta_TUAV2UAV)))))) + 1.0) ** 2)) - np.multiply(np.multiply(np.multiply(np.multiply(a,b),(np.exp(np.multiply(b,(a - seta_TUAV2UAV))))),(10.0 ** ((np.multiply((1.0 / np.log(10.0)),np.log(np.cos(np.multiply(np.multiply(seta_TUAV2UAV,np.pi),(1.0 / 180.0)))))) + (np.multiply(np.multiply((1.0 / np.log(10.0)),np.log(h_B - h_UAV)),(1.0 / 2.0))) + (np.multiply(np.multiply((1.0 / np.log(10.0)),np.log(f)),(1.0 / 2.0))) - (np.multiply(np.multiply((1.0 / np.log(10.0)),np.log((np.multiply((np.sqrt(2.0)),(1.0 / L_r ** 2))) + 1.0)),(1.0 / 2.0))) - 86.0 / 25.0))),(1.0 / ((np.multiply(a,(np.exp(np.multiply(b,(a - seta_TUAV2UAV)))))) + 1.0) ** 2)) + np.multiply(np.multiply(np.multiply(np.multiply(np.multiply((10.0 ** ((np.multiply((1.0 / np.log(10.0)),np.log(np.cos(np.multiply(np.multiply(seta_TUAV2UAV,np.pi),(1.0 / 180.0)))))) + (np.multiply(np.multiply((1.0 / np.log(10.0)),np.log(h_B - h_UAV)),(1.0 / 2.0))) + (np.multiply(np.multiply((1.0 / np.log(10.0)),np.log(f)),(1.0 / 2.0))) - (np.multiply(np.multiply((1.0 / np.log(10.0)),np.log((np.multiply((np.sqrt(2.0)),(1.0 / L_r ** 2))) + 1.0)),(1.0 / 2.0))) - 86.0 / 25.0)),(1.0 / ((np.multiply(a,(np.exp(np.multiply(b,(a - seta_TUAV2UAV)))))) + 1.0) - 1.0)),(1.0 / (np.cos(np.multiply(np.multiply(seta_TUAV2UAV,np.pi),(1.0 / 180.0)))))),(np.sin(np.multiply(np.multiply(seta_TUAV2UAV,np.pi),(1.0 / 180.0))))),np.pi),(1.0 / 180.0)))),20.0)) / ((1.0 / ((np.multiply(a,(np.exp(np.multiply(b,(a - seta_TUAV2UAV)))))) + 1.0)) - np.multiply((10.0 ** ((np.multiply((1.0 / np.log(10.0)),np.log(np.cos(np.multiply(np.multiply(seta_TUAV2UAV,np.pi),(1.0 / 180.0)))))) + (np.multiply(np.multiply((1.0 / np.log(10.0)),np.log(h_B - h_UAV)),(1.0 / 2.0))) + (np.multiply(np.multiply((1.0 / np.log(10.0)),np.log(f)),(1.0 / 2.0))) - (np.multiply(np.multiply((1.0 / np.log(10.0)),np.log((np.multiply((np.sqrt(2.0)),(1.0 / L_r ** 2))) + 1.0)),(1.0 / 2.0))) - 86.0 / 25.0)),(1.0 / ((np.multiply(a,(np.exp(np.multiply(b,(a - seta_TUAV2UAV)))))) + 1.0) - 1.0))) + np.multiply(np.multiply(np.multiply(np.multiply(t3,(1.0 / (np.cos(np.multiply(np.multiply(seta_TUAV2UAV,np.pi),(1.0 / 180.0)))))),(np.sin(np.multiply(np.multiply(seta_TUAV2UAV,np.pi),(1.0 / 180.0))))),np.pi),(1.0 / 9.0))
    return x